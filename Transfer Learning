# Transfer learning adalah teknik yang digunakan untuk memakai layer yang sudah dipakai sebelumnya yang sudah tersedia pada libary keras
# Pada Transfer learning kali ini kita akan melakukan transfer learning pada model ResNet152V2. Yang terdiri dari 152 layer
# Untuk transfer learning kita tidak perlu mengetik 152 model yang ada. Cukup dengan mengetik sebanyak 2 baris untuk mentransfer layer tersebut.
# Adapun langkahnya sama saja dengan CNN biasanya hanya beda pada saat kita membangun model saja

# Mealakukan download data
!wget --no-check-certificate \
  https://dicodingacademy.blob.core.windows.net/picodiploma/ml_pengembangan_academy/Chessman-image-dataset.zip \
  -O /tmp/Chessman-image-dataset.zip

# Melakukan extract gambar dan augmentasi gambar tersebut
import os
import zipfile
from tensorflow.keras.preprocessing.image import ImageDataGenerator
local_zip = '/tmp/Chessman-image-dataset.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/tmp')
zip_ref.close()
train_dir = os.path.join('/tmp/Chessman-image-dataset/Chess')
train_datagen = ImageDataGenerator(rescale=1./255,
    rotation_range=20,
    zoom_range=0.2,
    shear_range=0.2,
    fill_mode = 'nearest',
    validation_split=0.1) # set validation split

# Bagi dataset menjadi data training dan data validasi
train_generator = train_datagen.flow_from_directory(
    train_dir,
    target_size=(150, 150),
    batch_size=8,
    class_mode='categorical',
    subset='training') # set as training data
validation_generator = train_datagen.flow_from_directory(
    train_dir, # same directory as training data
    target_size=(150, 150),
    batch_size=16,
    class_mode='categorical',
    subset='validation')

# Disinilah letak perbedaannya perhatikan pada baris ResNet152V2 dan kemudian dilanjutkan oleh layer biasanya
import tensorflow as tf
from tensorflow.keras.layers import Input
from tensorflow.keras.applications import ResNet50
from tensorflow.keras.applications import ResNet152V2
model = tf.keras.models.Sequential([
    ResNet152V2(weights="imagenet", include_top=False, input_tensor=Input(shape=(150, 150, 3))),
    # tf.keras.layers.Dropout(0.4),
    tf.keras.layers.Flatten(), 
    tf.keras.layers.Dense(512, activation='relu'),
    tf.keras.layers.Dense(256, activation='relu'),
    tf.keras.layers.Dense(6, activation='softmax')  
])

# Menentukan optimizer dan loss
model.compile(optimizer=tf.optimizers.Adam(),
              loss='categorical_crossentropy',
              metrics = ['accuracy'])
model.layers[0].trainable = False

# Melakukan pelatihan model
history = model.fit(train_generator,
                              validation_data=validation_generator,
                              epochs=50,
                              verbose=2)
